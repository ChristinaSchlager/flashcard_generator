[{'context': 'Data science is the study of the extraction of knowledge from data. It uses various techniques from many fields, including signal processing, mathematics, probability, machine learning, computer programming, statistics, data engineering, pattern matching, and data visualization, with the goal of extracting useful knowledge from the data. With computer systems able to handle more data, big data is an important aspect of data science.\n\nA person that does data science is called a data scientist. Data scientists solve complicated data problems using mathematics, statistics and computer science, although very good skill in these subjects are not required. However, a data scientist is most likely to be an expert in only one or two of these disciplines, meaning that cross disciplinary teams can be a key component of data science.\n\nGood data scientists are able to apply their skills to achieve many kinds of purposes. Their skills and competencies vary widely.\n\nReferences \n\nComputer science\nStatistics', 'id': '447707', 'title': 'Data science', 'source': 'https://simple.wikipedia.org/wiki/Data%20science'}, {'context': 'In computer science, a data structure is the organization and implementation of values and information. In simple words, it is the way of organizing information in a computer so that it can be more easily understood and worked with. Data structures are different from abstract data types in the way they are used. Data structures are the implementations of abstract data types in a concrete and physical setting. They do this by using algorithms. This can be seen in the relationship between the list (abstract data type) and the linked list (data structure). A list contains a sequence of values or bits of information. A linked list also has a “pointer” or “reference” between each node of information that points to the next item and the previous one. This allows one to go forwards or backwards in the list. Furthermore, data structures are often optimized for certain operations. Finding the best data structure when solving a problem is an important part of programming. Data structure is a systematic way to store data\n\nBasic data structures\n\nArray\nThe simplest type of data structure is a linear array. Also known as a one-dimensional array. An array holds several values of the same type (Integer, Floats, String, etc.). Accessing elements within the array is very fast. An array is normally of fixed size. After the size of the array is defined at the start, it may not be possible to increase the size of the array without creating a new larger array and copying all values into the new array. In\xa0computer science, an\xa0array data structure\xa0or simply an\xa0array\xa0is a\xa0data structure\xa0consisting of a collection of\xa0elements\xa0(values\xa0or\xa0variables), each identified by at least one\xa0array index\xa0or\xa0key. An array is stored so that the position of each element can be computed from its index\xa0tuple by a mathematical formula.\n\nFor example, an array of 10 integer variables, with indices 0 through 9, may be stored as 10\xa0words\xa0at memory addresses 2000, 2004, 2008, 2036, so that the element with index\xa0i\xa0has the address 2000 + 4 ×\xa0i.\n\nAs the mathematical concept of a\xa0matrix\xa0can be represented as a two-dimensional grid, two-dimensional arrays are also sometimes called matrices. In some cases the term "vector" is used in computing to refer to an array, although\xa0tuples\xa0rather than\xa0vectors\xa0are the more correct mathematical equivalent. Arrays are often used to implement\xa0tables, especially\xa0look up tables; the word\xa0table\xa0is sometimes used as a synonym of\xa0array.\n\nArrays are among the oldest and most important data structures, and are used by almost every program. They can also be used to implement many other data structures, such as\xa0lists\xa0and\xa0strings. They effectively exploit the addressing logic of computers. In most modern computers and many\xa0external storage\xa0devices, the memory is a one-dimensional array of words, whose indices are their addresses.\xa0Processors, especially\xa0vector processors, are often optimized for array operations.\n\nArrays are useful because the element indices can be computed at\xa0run time. Among other things, this feature allows a single iterative\xa0statement\xa0to process arbitrarily many elements of an array. For that reason, the elements of an array data structure are required to have the same size and should use the same data representation. The set of valid index tuples and the addresses of the elements (and hence the element addressing formula) are usually,\xa0but not always, fixed while the array is in use.\n\nThe term\xa0array\xa0is often used to mean\xa0array data type, a kind of\xa0data type\xa0provided by most\xa0high-level programming languages\xa0that consists of a collection of values or variables that can be selected by one or more indices computed at run-time. Array types are often implemented by array structures; however, in some languages they may be implemented by\xa0hash tables,\xa0linked lists,\xa0search trees, or other data structures.\n\nLinked list\nA\xa0linked data structure\xa0is a set of\xa0information/data\xa0linked together by\xa0references. The data are often called nodes. The references are often called links or pointers. From here on, the words node and pointer will be used for these concepts.\n\nIn linked data structures, pointers are only\xa0dereferenced\xa0or compared for equality. Thus, linked data structures are different than\xa0arrays, which require adding and subtracting pointers.\n\nLinked lists,\xa0search trees,\xa0and expression trees are all linked data structures. They are also important in algorithms such as\xa0topological sort\xa0and\xa0set union-find.\n\nStack\n\nA stack is a basic data structure that can be logically thought as linear structure represented by a real physical stack or pile, a structure where insertion and deletion of items takes place at one end called top of the stack. The basic concept can be illustrated by thinking of your data set as a stack of plates or books where you can only take the top item off the stack in order to remove things from it. This structure is used all throughout programming.', 'id': '51975', 'title': 'Data structure', 'source': 'https://simple.wikipedia.org/wiki/Data%20structure'}, {'context': 'In computer science, a data type is the combination of a value range with permissible operations.\nData type is frequently shortened to type.\n\nProgramming \nData types in programming allow the programmer to perform operations on a date.\nEvery date has an associated data type.\n\nIn the Pascal programming language, the date 42 has the data type integer.\n The data type integer has a certain range of allowed values. For example on an 8-bit computer, this range includes all whole numbers between -127 and 127. The value 1337, however, is not an allowed integer value.\n Furthermore, the data type integer allows certain operations: The operation + can take two integer dates and calculates their combined sum. There are many more operations. All those operations characterize the data type integer.\nA data type forms a unit:\nTogether, the specific permissible range and legal operations, are referred to as a concrete data type.\nWhen a programmer or the compiler read the word integer in the source code, they automatically understand which values and operations are allowed.\n\nAvailability\n\nHigh-level \nData types are an abstract concept.\nThis concept primarily appears in high-level programming languages.\nVirtually all high-level programming language explicitly include the notion of data type.\nCommon basic data types may include:\n integers\n Boolean values\n characters (individual letters) and strings\n a subset of real numbers\n\nUsually, these and other basic data types can be combined to custom data types using structure concepts like:\n arrays\n sets\n records\n\nLow-level \nThe notion of data type as presented above is unknown in assembly language, a low-level programming language.\nAll computers know integer number values.\nModern computers also know real numbers in binary.\nBut there is no rigid enforcement of proper “data type” use.\nAssembly language does not prevent using an integer as if it was a real number.\nThis is intentional, because assembly language is the basis of all (high-level) programming languages.\n\nYet, the processor’s machine code sets the limits.\nUsually, the only “data types” are:\n register names\n memory addresses\n immediate values\nAll of which may be further differentiated by their size, how many Bytes each of those occupy, or—in the case of memory address—how many Bytes the referenced object occupies.\n\nRelated pages \n File format: describes how to read or write a computer file (legal operations) and what this file may contain (permissible value range)\n variable: variables in computer programming frequently require a data type\n\nSources \n\nComputer science', 'id': '392913', 'title': 'Data type', 'source': 'https://simple.wikipedia.org/wiki/Data%20type'}]
-----------
Number of Pairs: 3
Number of Generated Pairs: 1
Number of Generated Pairs: 2
Number of Generated Pairs: 3
Number of Pairs: 11
Number of Generated Pairs: 1
Number of Generated Pairs: 2
Number of Generated Pairs: 3
Number of Generated Pairs: 4
Number of Generated Pairs: 5
Number of Generated Pairs: 6
Number of Generated Pairs: 7
Number of Generated Pairs: 8
Number of Generated Pairs: 9
Number of Generated Pairs: 10
Number of Generated Pairs: 11
Number of Pairs: 19
Number of Generated Pairs: 1
Number of Generated Pairs: 2
Number of Generated Pairs: 3
Number of Generated Pairs: 4
Number of Generated Pairs: 5
Number of Generated Pairs: 6
Number of Generated Pairs: 7
Number of Generated Pairs: 8
Number of Generated Pairs: 9
Number of Generated Pairs: 10
Number of Generated Pairs: 11
Number of Generated Pairs: 12
Number of Generated Pairs: 13
Number of Generated Pairs: 14
Number of Generated Pairs: 15
Number of Generated Pairs: 16
Number of Generated Pairs: 17
Number of Generated Pairs: 18
Number of Generated Pairs: 19
